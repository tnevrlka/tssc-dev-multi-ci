{%- include "do-not-edit.njk" -%}

# 💁 The Gitops Starter workflow will:
# - Checkout your repository
# - Perform a TSSC container image build
# - Push the built image to the users provided registry
# - Update the deployment yaml

name: TSSC-Build-Attest-Scan-Deploy
env:
  CI_TYPE: github

  # 🖊️ EDIT to change the image registry settings.

  # Vars

{% filter indent(2) %}
{%- for var in build_variables -%}
{% include "github-variable.njk" %}
{%- endfor %}
# Secrets
{%- for secret in build_secrets -%}
{% include "github-secret.njk" %}
{%- endfor %}
{% endfilter %}

  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: ${{ "secrets.IMAGE_REGISTRY" | inCurlies }}

  # 🖊️ EDIT to specify custom tags for the container image, or default tags will be generated below.
  IMAGE_TAGS: ""
  IMAGE_TAG: ""
  DEFAULT_UPDATE_VIA_PUSH: "true"
  # 🖊️ EDIT to set a name for your OpenShift app, or a default one will be generated below.
  APP_NAME: ""
on:
  push:
    branches:
      - 'main'
  workflow_dispatch:
    branches:
      - '*'

jobs:
  tssc-ci-cd:
    name: Build and send Image Update PR
    runs-on: ubuntu-24.04
    container:
      image: quay.io/redhat-appstudio/rhtap-task-runner:latest
      options: --privileged
    environment: production

    steps:
    - name: Check for required secrets
      uses: actions/github-script@v7
      with:
        script: |
          {#-
            Perhaps this could use the bash var/secret checker too for consistency
          #}
          const vars = {
{% filter indent(10) %}
{%- for var in build_variables -%}
{% include "github-variable.njk" %}
{%- endfor %}
{% endfilter %}
          };

          const missingVars = Object.entries(vars).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Variable "${name}" is not set`);
              return true;
            }
            core.info(`✔️ Variable "${name}" is set`);
            return false;
          });

          const secrets = {
            IMAGE_REGISTRY: `${{ "secrets.IMAGE_REGISTRY" | inCurlies }}`,
{% filter indent(10) %}
{%- for secret in build_secrets -%}
{% include "github-secret.njk" %}
{%- endfor %}
{% endfilter %}
          };

          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`✔️ Secret "${name}" is set`);
            return false;
          });

          if (missingVars.length > 0) {
            core.error(`❌ At least one required variable is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#creating-configuration-variables-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_variable_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }

          if (missingSecrets.length > 0) {
            core.error(`❌ At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }

          if (missingVars.length > 0 || missingSecrets.length > 0) {
            core.setFailed()
          } else {
            core.info(`✅ All the required variables and secrets are set`);
          }
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: '2'
    - name: Pre-init
      run: |
        buildah --version
        syft --version
        cosign version
        ec version
        {# So git doesn't throw "dubious ownership" errors -#}
        git config --global --add safe.directory $(pwd)
        cat rhtap/env.sh

{%- for step in build_steps %}
    - name: {{ step.name | title }}
      run: |
{%- for substep in step.substeps %}
        echo "• {{ substep }}"
        bash /work/rhtap/{{ substep }}.sh
{%- endfor -%}
{%- endfor %}
    - name: Done
      run: |
        echo "Done"
